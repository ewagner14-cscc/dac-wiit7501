...@classes
host: Host with containers {
  c1: container {
    eth0
  }
  c2: container {
    eth0
  }
  eth0: Host eth0
}
network: {
  icon: https://icons.terrastruct.com/infra/014-network.svg
  shape: image
}
host.eth0 <-> network: {class: blue-bold}

layers: {
  table: {
    label: MacVan vs IPVlan
    grid-rows: 2
    grid-columns: 3
    grid-gap: 0
    feature.class: header
    macvlan.class: header
    ipvlan.class: header

    r1c1: Functionality
    r1c2: Creates virtual network interfaces with unique MAC addresses.
    r1c3: Creates virtual network interfaces sharing the same MAC address

    r2c1: Use Cases
    r2c2: Legacy applications, integration with existing networks,\nvirtualized environments.
    r2c3: Load balancing, high-performance networking,\nvirtualized environments requiring multiple IP addresses on a single interface.

    r3c1: Benefits
    r3c2: Simulates physical devices on the network, VLAN support.
    r3c3: Improved performance, simplified configuration, support for multiple IP addresses per container.

    r4c1: Considerations
    r4c2: Potential for MAC address conflicts if not managed carefully.
    r4c3: Less suitable for legacy applications relying on unique MAC addresses
  }
}

scenarios: {
  none: {
    label: None/ Network
    host.none: No access to internet {
      style: {
        fill: red
        opacity: 0.7
        stroke: darkred
        stroke-width: 4
      }
    }
    info: |md
      Containers run without access to host machine network. Useful for:

      - timebased scripts/ cronjobs
      - prepping volumes or data
      - part of a pipeline
    |
    host.c*.eth0 -> host.none: {
      style.stroke: darkred
      style.stroke-width: 6
    }
  }
  bridged: {
    label: Bridged
    host.bridge: {
      veth0
      veth1
    }
    host.bridge -> host.eth0: {class: red-dash}
    host.c1.eth0 -> host.bridge.veth0: {class: green-dash}
    host.c2.eth0 -> host.bridge.veth1: {class: green-dash}
    info: |md
      default and user-defined
    |
  }
  hostmode: {
    label: Host mode
    host.c1.eth0 -> host.eth0: {class: red-dash}
    host.c2.eth0 -> host.eth0: {class: red-dash}
    info: |md
      Uses host network. No automatic IP tables for container
    |
  }
  macvlan: {
    label: MacVLan Bridge mode L2
    host.bridge: MacVLan bridge {
      veth0: 00:1A:2B:3C:4D:5E
      veth1: 2C:54:91:88:C9:E3
    }
    host.bridge -> host.eth0: {class: red-dash}
    host.c1.eth0 -> host.bridge.veth0: {class: green-dash}
    host.c2.eth0 -> host.bridge.veth1: {class: green-dash}
    info: |md
      ## Use Case: Providing containers with MAC addresses that appear as physical devices on the network. 

      This is useful for:
      - Legacy applications: Requiring specific MAC addresses for network access.
      - Integration with existing network infrastructure: Making containers appear like regular machines on the network.
      - Virtualized environments: Where containers need to interact directly with VLANs.
    |
  }
  ipvlan: {
    label: IPVlan
    host.c1.eth0: 192.168.1.2/24
    host.c2.eth0: 192.168.1.3/24
    host.eth0: 192.168.1.0/24
    host.c1.eth0 -> host.eth0: attach directly {class: green-dash}
    host.c2.eth0 -> host.eth0: attach directly {class: green-dash}
    info: |md
      Main points:

      - L2 is default mode (depicted) for IPLVan. 
      - L3 has the docker daemon use the host eth0 as a router.
        - [more info here](https://docs.docker.com/engine/network/drivers/ipvlan/)
      - Ipvlan is useful due to its performance benefits and support for multiple IP addresses per container. 

      Useful in scenarios like:

      - Load Balancing: Multiple containers on the same host can share an IP address, enhancing load distribution and high availability.
      - High-Performance Networking: Reduced overhead compared to macvlan, improving network throughput.
      - Virtualized Environments: Assigning multiple IP addresses to a single container interface, offering more flexibility in network configurations.
    |
  }

  userdefbridge: {
    label: User-defined Bridge
    host.bridge: Eric's bridge {
      veth0
      veth1
    }
    host.bridge1: other bridges {
      style.multiple: true
    }
    host.bridge -> host.eth0: {class: red-dash}
    host.c1.eth0 -> host.bridge.veth0: {class: green-dash}
    host.c2.eth0 -> host.bridge.veth1: {class: green-dash}
    host.c1.eth0 -> host.bridge1: can access other bridges {
      class: green-dash
      style.stroke: darkorange
    }
    info: |md
      Key Benefits:

      - supports segmentation
      - native networking mode to containers
      - flexible, a running can connect to multiple bridges
    |
  }
  userdefoverlay: {
    label: User-Defined Overlay
    bridge: Overlay Bridge {
      port: 8080
    }
    host2: Other container hosts {
      style.multiple: true
      c1: container {
        eth0
      }
      eth0: Host eth0
      daemon: Docker daemon
    }
    host2.eth0 <-> network: {
      class: blue-bold
      style.opacity: 0.3
    }
    (host.eth0 <-> network)[0].style.opacity: 0.3

    host.daemon: Docker daemon
    host*.daemon -> bridge: create and listen for traffic {
      class: green-dash
    }
    traffic: {
      icon: https://icons.terrastruct.com/azure/Web%20Service%20Color/App%20Service%20Domains.svg
      shape: image
    }
    traffic -> network: {class: blue-bold}
    network -> bridge.port: {class: blue-bold}
    bridge -> host*.c*.eth0: {class: red-dash}
    info: |md
      Key Benefits:

      Enables communication between containers running on different hosts. A multi-host network.

      Useful for:
      - Swarm clusters: Scaling applications across multiple machines.
      - Distributed systems: Applications with components spread across different hosts.
      - Hybrid cloud deployments: Spanning on-premises and cloud environments.
    |
  }
}
